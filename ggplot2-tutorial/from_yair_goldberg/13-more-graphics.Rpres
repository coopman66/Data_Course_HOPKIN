<style>
  .reveal pre {font-size: 12px;}
</style>

More Graphics
====


===

The following presentation is based on the [ggplot2 tutorial](https://github.com/jennybc/ggplot2-tutorial) written by Prof. Jennifer Bryan. 

Load the library
```{r}
library(ggplot2)
```

Read data
```{r}
gdURL <- "http://tiny.cc/gapminder"
gDat <- read.table(file = gdURL,header=T,sep = "\t")
str(gDat)
```



Bar charts
===

Consider: number of observations for each continent

```{r}
table(gDat$continent)

```

This works because default stat for `geom_bar()` is "bin"
```{r}
ggplot(gDat, aes(x = continent)) + geom_bar()

```

Bar charts
===
Let's reorder the continents based on frequency
```{r}
p <- ggplot(gDat, aes(x = reorder(continent, continent, length)))
p + geom_bar()

```


Bar charts
===
Would you rather the bars run horizontally?
```{r}
p + geom_bar() + coord_flip()

```


Bar charts
===
How about a better data:ink ratio?
```{r}
p + geom_bar(width = 0.05) + coord_flip()

```


===
Consider a scenario where you DON'T want the default "bin" stat, i.e. the bar length or height already exists as a variable
```{r}
(jDat <- as.data.frame(with(gDat, table(continent, deparse.level = 2))))

```

===

This simple call no longer works, because we have pre-tabulated
```{r}
ggplot(jDat, aes(x = continent)) + geom_bar()

```

===
THIS works when bar length or height already exists

```{r}
ggplot(jDat, aes(x = continent, y = Freq)) + geom_bar(stat = "identity")

```



Themes
===

The appearance of non-data elements of the plot is controlled by the theme system
```{r}
library(ggthemes)
```

Themes
===
Revisit a plot from earlier
```{r}
p <- ggplot(gDat, aes(x = gdpPercap, y = lifeExp))
p <- p + scale_x_log10()
p <- p + aes(color = continent) + geom_point() + geom_smooth(lwd = 3, se = FALSE)
p

```

Titles
===
Give it a title
```{r}
p + ggtitle("Life expectancy over time by continent")

```

Themes
===
Change overall look and feel with a premade theme
```{r}
p + theme_grey() # the default

```

Themes
===
Suppress the usual grey background
```{r}
p + theme_bw()

```

Themes
===
Exploring some themes from the [ggthemes package]("https://github.com/jrnold/ggthemes")

```{r}
p + theme_calc() + ggtitle("ggthemes::theme_calc()")

```

Themes
===
```{r}
p + theme_economist() + ggtitle("ggthemes::theme_economist()")

```

Themes
===
```{r}
p + theme_economist_white() + ggtitle("ggthemes::theme_economist_white()")

```

Themes
===
```{r}
p + theme_few() + ggtitle("ggthemes::theme_few()")

```


Themes
===
```{r}
p + theme_gdocs() + ggtitle("ggthemes::theme_gdocs()")

```

Themes
===
```{r}
p + theme_tufte() + ggtitle("ggthemes::theme_tufte()")

```

Themes
===
```{r}
p + theme_wsj() + ggtitle("ggthemes::theme_wsj()")

```


Colors
===
Let just look at four countries

```{r}
jCountries <- c("Canada", "Rwanda", "Cambodia", "Mexico")
x <- droplevels(subset(gDat, country %in% jCountries))
ggplot(x, aes(x = year, y = lifeExp, color = country)) +
  geom_line() + geom_point()

```

Colors
===
Reorder the country factor to reflect `lifeExp` in 2007
```{r}
x <- transform(x, country = reorder(country, -1 * lifeExp, max))
ggplot(x, aes(x = year, y = lifeExp, color = country)) +
  geom_line() + geom_point()

```

Colors
===
Look at the RColorBrewer color palettes
```{r}
library("RColorBrewer")
display.brewer.all()

```
Colors
===
Focus on the qualitative palettes
```{r}
display.brewer.all(type = "qual")

```

Colors
===
Pick some colors
```{r}
#' pick some colors
jColors = brewer.pal(n = 8, "Dark2")[seq_len(nlevels(x$country))]
names(jColors) <- levels(x$country)
```

Colors
===
Remake the plot with our new colors
```{r}
ggplot(x, aes(x = year, y = lifeExp, color = country)) +
  geom_line() + geom_point() +
  scale_color_manual(values = jColors)

```

Colors
===
Pick some super ugly colors for shock value
```{r}
kColors = c("darkorange2", "deeppink3", "lawngreen", "peachpuff4")
names(kColors) <- levels(x$country)

```


Remake the plot with our ugly colors
```{r}
ggplot(x, aes(x = year, y = lifeExp, color = country)) +
  geom_line() + geom_point() +
  scale_color_manual(values = kColors)

```

===
Load the color scheme


```{r}
country_colors <- read.delim("gapminder-country-colors.tsv",
                             colClasses = list(color = "character"))
str(country_colors)
```



===
Drop Oceania


```{r}
gDat <- droplevels(subset(gDat, continent != "Oceania"))
country_colors <- droplevels(subset(country_colors, continent != "Oceania"))

jYear <- 2007 # this can obviously be changed
jPch <- 21
jDarkGray <- 'grey20'
jXlim <- c(150, 115000)
jYlim <- c(16, 100)
```

===
Handy for ggplot2 `scale_fill_manual()`

```{r}
jColors <- country_colors$color
names(jColors) <- country_colors$country

ggplot(subset(gDat, year == jYear),
       aes(x = gdpPercap, y = lifeExp)) +
  scale_x_log10(limits = jXlim) + ylim(jYlim) +
  geom_point(aes(size = sqrt(pop/pi)), pch = jPch, color = jDarkGray,
             show_guide = FALSE) +
  scale_size_continuous(range=c(1,40)) +
  facet_wrap(~ continent) + coord_fixed(ratio = 1/43) +
  aes(fill = country) + scale_fill_manual(values = jColors) +
  theme_bw() + theme(strip.text = element_text(size = rel(1.1)))
```




