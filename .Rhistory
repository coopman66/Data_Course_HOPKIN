# Assign letter grade function
biol1620_letter_grades = function(x){   # give data frame object
Grade = c()
for(i in 1:length(row.names(x))){
if(x$Final.Points[i] >= 600){
Grade[i] <- "A"
}
if(x$Final.Points[i] %in% c(540:599)){
Grade[i] <- "B"
}
if(x$Final.Points[i] %in% c(480:539)){
Grade[i] <- "C"
}
if(x$Final.Points[i] %in% c(400:479)){
Grade[i] <- "D"
}
if(x$Final.Points[i] < 400){
Grade[i] <- "E"
}
assign("letter.grades", Grade, envir = .GlobalEnv)
x$Grades <- letter.grades
}
}
library(ggplot2)
plot_sec3 = ggplot(df.3, aes(x="Grade Distribution",y=Final.Points)) +
geom_violin(fill = "Green") +
geom_hline(aes(yintercept=400)) +
geom_hline(aes(yintercept=480)) +
geom_hline(aes(yintercept=540)) +
geom_hline(aes(yintercept=600)) +
theme_bw() + ggtitle("Final Score Distribution - Section 3")
plot_sec3 + annotate("text",x=1,y=650,label = "A: 9") +
annotate("text",x=1,y=570,label = "B: 9") +
annotate("text",x=1,y=510,label = "C: 4") +
annotate("text",x=1,y=450,label = "D: 5") +
annotate("text",x=1,y=200,label = "E: 13")
# ASSIGN LETTER GRADES
biol1620_letter_grades(df.3)
#Section 3
df.3 = read.csv("~/Desktop/12_Dec_13_25_Grades-BIOL-1620.csv", header = TRUE, row.names = 1)
# df.3 = df.3[df.3$Final.Points > 100,]
hist(df.3$Final.Points, breaks = 10)
# Assign letter grade function
biol1620_letter_grades = function(x){   # give data frame object
Grade = c()
for(i in 1:length(row.names(x))){
if(x$Final.Points[i] >= 600){
Grade[i] <- "A"
}
if(x$Final.Points[i] %in% c(540:599)){
Grade[i] <- "B"
}
if(x$Final.Points[i] %in% c(480:539)){
Grade[i] <- "C"
}
if(x$Final.Points[i] %in% c(400:479)){
Grade[i] <- "D"
}
if(x$Final.Points[i] < 400){
Grade[i] <- "E"
}
}
assign("letter.grades", Grade, envir = .GlobalEnv)
x$Grades <- letter.grades
}
library(ggplot2)
plot_sec3 = ggplot(df.3, aes(x="Grade Distribution",y=Final.Points)) +
geom_violin(fill = "Green") +
geom_hline(aes(yintercept=400)) +
geom_hline(aes(yintercept=480)) +
geom_hline(aes(yintercept=540)) +
geom_hline(aes(yintercept=600)) +
theme_bw() + ggtitle("Final Score Distribution - Section 3")
plot_sec3 + annotate("text",x=1,y=650,label = "A: 9") +
annotate("text",x=1,y=570,label = "B: 9") +
annotate("text",x=1,y=510,label = "C: 4") +
annotate("text",x=1,y=450,label = "D: 5") +
annotate("text",x=1,y=200,label = "E: 13")
# ASSIGN LETTER GRADES
biol1620_letter_grades(df.3)
df.3$Grades <- letter.grades
row.names(df.3[Grades == "E",])
row.names(df.3[df.3$Grades == "E",])
#Section 3
df.3 = read.csv("~/Desktop/12_Dec_13_25_Grades-BIOL-1620.csv", header = TRUE, row.names = 1)
# df.3 = df.3[df.3$Final.Points > 100,]
hist(df.3$Final.Points, breaks = 10)
# Assign letter grade function
biol1620_letter_grades = function(x){   # give data frame object
Grade = c()
for(i in 1:length(row.names(x))){
if(x$Final.Points[i] >= 600){
Grade[i] <- "A"
}
if(x$Final.Points[i] %in% c(540:599)){
Grade[i] <- "B"
}
if(x$Final.Points[i] %in% c(480:539)){
Grade[i] <- "C"
}
if(x$Final.Points[i] %in% c(400:479)){
Grade[i] <- "D"
}
if(x$Final.Points[i] < 400){
Grade[i] <- "E"
}
}
assign("letter.grades", Grade, envir = .GlobalEnv)
x$Grades <- letter.grades
}
library(ggplot2)
plot_sec3 = ggplot(df.3, aes(x="Grade Distribution",y=Final.Points)) +
geom_violin(fill = "Green") +
geom_hline(aes(yintercept=400)) +
geom_hline(aes(yintercept=480)) +
geom_hline(aes(yintercept=540)) +
geom_hline(aes(yintercept=600)) +
theme_bw() + ggtitle("Final Score Distribution - Section 3")
plot_sec3 + annotate("text",x=1,y=650,label = "A: 9") +
annotate("text",x=1,y=570,label = "B: 9") +
annotate("text",x=1,y=510,label = "C: 4") +
annotate("text",x=1,y=450,label = "D: 5") +
annotate("text",x=1,y=200,label = "E: 12")
biol1620_letter_grades(df.3)
df.3$Grades <- letter.grades
row.names(df.3[df.3$Grades == "E",])
row.names(df.3[df.3$Grades == "D",])
row.names(df.3[df.3$Grades == "C",])
row.names(df.3[df.3$Grades == "B",])
row.names(df.3[df.3$Grades == "A",])
library(gzahn)
library(gzahn)
library(gzahn)
#Section 3
df.3 = read.csv("~/Desktop/12_Dec_13_25_Grades-BIOL-1620.csv", header = TRUE, row.names = 1)
# df.3 = df.3[df.3$Final.Points > 100,]
hist(df.3$Final.Points, breaks = 10)
library(gzahn)
biol1620_letter_grades
biol1620_letter_grades(df.3)
library(gzahn)
biol1620_letter_grades(df.3)
library(gzahn)
df.3 = read.csv("~/Desktop/12_Dec_13_25_Grades-BIOL-1620.csv", header = TRUE, row.names = 1)
hist(df.3$Final.Points, breaks = 10)
library(gzahn)
biol1620_letter_grades(df.3)
library(geoff)
read.csv("~/Desktop/Bioinformatics_Help/SIS_spp_no_sp.txt")
spp = read.csv("~/Desktop/Bioinformatics_Help/SIS_spp_no_sp.txt")
read.csv("~/Desktop/Bioinformatics_Help/SIS_Fungal_Database_Coverage_genus.txt")
genus = read.csv("~/Desktop/Bioinformatics_Help/SIS_Fungal_Database_Coverage_genus.txt")
?strsplit
strsplit(spp, " ")
strsplit(spp, split = " ", fixed = TRUE)
strsplit(spp, split = "s", fixed = TRUE)
spp = read.csv("~/Desktop/Bioinformatics_Help/SIS_spp_no_sp.txt", stringsAsFactors = FALSE)
genus = read.csv("~/Desktop/Bioinformatics_Help/SIS_Fungal_Database_Coverage_genus.txt")
strsplit(spp, split = " ", fixed = TRUE)
View(spp)
spp = read.csv("~/Desktop/Bioinformatics_Help/SIS_spp_no_sp.txt", stringsAsFactors = FALSE, header = FALSE)
strsplit(spp$V1, split = " ", fixed = TRUE)
split = strsplit(spp$V1, split = " ", fixed = TRUE)
unlist(split)
sapply(split, "[[", 2)
sapply(split, "[[", 1)
spp_genus = sapply(split, "[[", 1)
unique(spp_genus)
spp_spp = sapply(split, "[[", 2)
data.frame(Genus = spp_genus, Species = spp_spp)
df = data.frame(Genus = spp_genus, Species = spp_spp)
View(df)
library(dplyr)
group_by(df, Genus)
group_by(df, Genus) %>%
sample_n(size=1)
df2 = group_by(df, Genus) %>%
sample_n(size=1)
write.csv(df2, "~/Desktop/Bioinformatics_Help/SIS_sparse_spp_names.txt")
View(df2)
write.csv(df2, "~/Desktop/Bioinformatics_Help/SIS_sparse_spp_names.txt", row.names = FALSE)
plot(dnorm, xlim=c(-4,4))
plot(dnorm)
plot(dnorm, xlim=c(-4,4))
plot(dbinom, xlim=c(-4,4))
data_course_letter_grades = function(x, a.cutoff = 700, b.cutoff = c(640,699), c.cutoff = c(560,639), d.cutoff = c(480,559)){   # give data frame object that has "Final.Points" column.
Grade = c()
for(i in 1:length(row.names(x))){
if(x$Final.Points[i] >= a.cutoff){
Grade[i] <- "A"
}
if(x$Final.Points[i] %in% c(b.cutoff[1]:b.cutoff[2])){
Grade[i] <- "B"
}
if(x$Final.Points[i] %in% c(c.cutoff[1]:c.cutoff[2])){
Grade[i] <- "C"
}
if(x$Final.Points[i] %in% c(d.cutoff[1]:d.cutoff[2])){
Grade[i] <- "D"
}
if(x$Final.Points[i] < d.cutoff[1]){
Grade[i] <- "E"
}
}
assign("letter.grades", Grade, envir = .GlobalEnv)
}
prompt(data_course_letter_grades)
getwd()
library(geoff)
library(gzahn)
observation = c(1:1000) # ordered numbers 1 to 1000
# define a random sampling function
samp = function(x){
x+(1+(3*rnorm(1)))
}
# set variable vector
wings = c()
# run random sampling function 1000 times
for(i in 1:1000){
wings[i] = samp(5)
}
# same as previous
velo = c()
for(i in 1:1000){
velo[i] = samp(15)
}
wingspan = wings
mass = (wingspan * (3+rnorm(1)))
velocity = velo
#ensure they are positive
wingspan = wingspan+22
mass=mass+41
velocity=velocity+5
df = as.data.frame(cbind(observation,wingspan,mass, velocity))
# look at fake data summary
summary(df)
View(df)
library(readr)
#look at working directory
getwd()
setwd("~/Desktop/GIT_REPOSITORIES/Data_Course/")
# Import dataset
wingspan_vs_mass <- read_csv("./data/wingspan_vs_mass.csv", col_types = cols(X1 = col_skip()))
# Sort by mass (decreasing)
wingspan_vs_mass = wingspan_vs_mass[order(wingspan_vs_mass$mass, decreasing = TRUE),]
# Summarize wingspan and mass values to get min, mean, max
summary(wingspan_vs_mass$wingspan)[c(1,3,6)]
summary(wingspan_vs_mass$mass)[c(1,3,6)]
plot(wingspan_vs_mass$wingspan ~ wingspan_vs_mass$mass, xlab="Mass",ylab="Wingspan")
fit = lm(wingspan_vs_mass$wingspan ~ wingspan_vs_mass$mass)
# Get slope (coefficient of mass)
fit$coefficients[2]
cat(wingspan_vs_mass$mass, sep = "\n")
print("Wingspan",quote = FALSE)
summary(wingspan_vs_mass$wingspan)[c(1,3,6)]
print("Mass",quote = FALSE)
summary(wingspan_vs_mass$mass)[c(1,3,6)]
print("Slope of linear model fit",quote = FALSE)
fit$coefficients[2]
#Repeat the Excel analysis in R
#Load package(s)
library(readr)
#look at working directory
getwd()
#set new working directory
setwd("~/Desktop/GIT_REPOSITORIES/Data_Course/")
# Import dataset
wingspan_vs_mass <- read_csv("./data/wingspan_vs_mass.csv", col_types = cols(X1 = col_skip()))
# Sort by mass (decreasing)
wingspan_vs_mass = wingspan_vs_mass[order(wingspan_vs_mass$mass, decreasing = TRUE),]
# Summarize wingspan and mass values to get min, mean, max
summary(wingspan_vs_mass$wingspan)[c(1,3,6)]
summary(wingspan_vs_mass$mass)[c(1,3,6)]
# Plot wingspan vs mass and save to file
jpeg("./output/scatterplot.jpg")
plot(wingspan_vs_mass$wingspan ~ wingspan_vs_mass$mass, xlab="Mass",ylab="Wingspan")
dev.off()
# Get linear model fit
fit = lm(wingspan_vs_mass$wingspan ~ wingspan_vs_mass$mass)
# Get slope (coefficient of mass)
fit$coefficients[2]
# Print a file that contains the measured mass values, ordered from highest to lowest (one value per line)
sink("./output/mass_ordered.txt")
cat(wingspan_vs_mass$mass, sep = "\n")
sink(NULL)
# Print a file that has the slope of our linear model fit (cofficient of mass for linear model)
# along with summary stats for each variable
sink("./output/summary_and_slope.txt")
print("Wingspan",quote = FALSE)
summary(wingspan_vs_mass$wingspan)[c(1,3,6)]
print("Mass",quote = FALSE)
summary(wingspan_vs_mass$mass)[c(1,3,6)]
print("Slope of linear model fit",quote = FALSE)
fit$coefficients[2]
sink(NULL)
wingspan_vs_mass <- read_csv("./data/wingspan_vs_mass.csv", col_types = cols(X1 = col_skip()))[1:500,]
# Sort by mass (decreasing)
wingspan_vs_mass = wingspan_vs_mass[order(wingspan_vs_mass$mass, decreasing = TRUE),]
# Summarize wingspan and mass values to get min, mean, max
summary(wingspan_vs_mass$wingspan)[c(1,3,6)]
summary(wingspan_vs_mass$mass)[c(1,3,6)]
# Plot wingspan vs mass and save to file
jpeg("./output/scatterplot.jpg")
plot(wingspan_vs_mass$wingspan ~ wingspan_vs_mass$mass, xlab="Mass",ylab="Wingspan")
dev.off()
# Get linear model fit
fit = lm(wingspan_vs_mass$wingspan ~ wingspan_vs_mass$mass)
# Get slope (coefficient of mass)
fit$coefficients[2]
# Print a file that contains the measured mass values, ordered from highest to lowest (one value per line)
plot(wingspan_vs_mass$wingspan ~ wingspan_vs_mass$mass, xlab="Mass",ylab="Wingspan")
vector1 = c(1,2,3,4,5,6,7,8,9,10)
vector2 = c(5,6,7,8,4,3,2,1,3,10)
vector1*vector2
getwd()
source('~/.active-rstudio-document', echo=TRUE)
read.csv("Data/Fake_grade_data.csv")
getwd()
read.csv("Data/Fake_grade_data.csv")
df = read.csv("Data/Fake_grade_data.csv")
rowSums(df)
row.names(df) <- df$Student
df$Student <- NULL
df
rowSums(df)
df = read.csv("Data/Fake_grade_data.csv")
df
getwd()
df = read.csv("Data/Fake_grade_data.csv")
row.names(df) <- df$Student
df$Student <- NULL
rowSums(df)
function(x){
if(x>699){"A"}
}
f = function(x){
if(x>699){"A"}
}
f(890)
f = function(x){
if(x>699){"A"}
if(639>x<700){"B"}
}
f = function(x){
if(x>699){"A"}
if(x>639&x<700){"B"}
}
f(640)
f(639)
f = function(x){
if(x>699){"A"}
if(x>639&x<700){"B"}
if(x>559&x<640){"C"}
if(x>479&x<560){"D"}
if(x<480){"F"}
}
f(334)
f(rowSums(df))
sapply(rowSums(df), f)
apply(rowSums(df),2, f)
apply(rowSums(df), f)
apply(rowSums(df), FUN=f)
rowSums(df)
lapply(rowSums(df), FUN=f)
totals <- rowSums(df)
f(totals)
b = f(totals)
lapply(totals, f)
f(totals[1])
names(totals)
names(totals) <- NULL
f(totals[1])
f(696)
f = function(x){
if(x>699){"A"}
if(x>639&x<700){"B"}
if(x>559&x<640){"C"}
if(x>479&x<560){"D"}
if(x<480){"F"}
}
f(696)
f(12)
f(699)
f(6)
f(6000)
f = function(x){
if(x>699){"A"}
else(x>639&x<700){"B"}
else(x>559&x<640){"C"}
else(x>479&x<560){"D"}
else(x<480){"F"}
for(i in totals){
print(f(i))
}
############################################
##   Help! Everything is out of order!!   ##
############################################
# It's the end of the semester and I need to assign letter grades to all of you
# I've got your assignment, exam, and project scores in a .csv file
# I need to total up the points for each student
# I wrote code for this but my dog came along and mixed it all up
# Please reorder the lines of code so it will run
df = read.csv("Data/Fake_grade_data.csv")
row.names(df) <- df$Student
df$Student <- NULL
totals <- rowSums(df)
names(totals) <- NULL
f = function(x){
if(x>699){"A"}
if(x>639&x<700){"B"}
if(x>559&x<640){"C"}
if(x>479&x<560){"D"}
if(x<480){"F"}
}
for(i in totals){
print(f(i))
}
f
f(555)
f(5)
f(700)
f = function(x){
if(x>699){"A"},
if(x>639&x<700){"B"},
if(x>559&x<640){"C"},
if(x>479&x<560){"D"},
if(x<480){"F"}
}
f = function(x){
if(x>699){"A"}
if(x>639&x<700){"B"}
if(x>559&x<640){"C"}
if(x>479&x<560){"D"}
if(x<480){"F"}
}
f = function(x){
if(x>699){x = "A"}
if(x>639&x<700){x = "B"}
if(x>559&x<640){x = "C"}
if(x>479&x<560){x = "D"}
if(x<480){x = "F"}
}
f(700)
f(7)
x
df$Final.Points <- totals
data_course_letter_grades = function(x, a.cutoff = 700, b.cutoff = c(640,699), c.cutoff = c(560,639), d.cutoff = c(480,559)){   # give data frame object that has "Final.Points" column.
Grade = c()
for(i in 1:length(row.names(x))){
if(x$Final.Points[i] >= a.cutoff){Grade[i] <- "A"}
if(x$Final.Points[i] %in% c(b.cutoff[1]:b.cutoff[2])){
Grade[i] <- "B"
}
if(x$Final.Points[i] %in% c(c.cutoff[1]:c.cutoff[2])){
Grade[i] <- "C"
}
if(x$Final.Points[i] %in% c(d.cutoff[1]:d.cutoff[2])){
Grade[i] <- "D"
}
if(x$Final.Points[i] < d.cutoff[1]){
Grade[i] <- "E"
}
}
assign("letter.grades", Grade, envir = .GlobalEnv)
}
# Define a grading function. Need to give it a data.frame object that has "Final.Points" column.
data_course_letter_grades = function(x, a.cutoff = 700,
b.cutoff = c(640,699),
c.cutoff = c(560,639),
d.cutoff = c(480,559)){
Grade = c()
for(i in 1:length(row.names(x))){
if(x$Final.Points[i] >= a.cutoff){Grade[i] <- "A"}
if(x$Final.Points[i] %in% c(b.cutoff[1]:b.cutoff[2])){Grade[i] <- "B"}
if(x$Final.Points[i] %in% c(c.cutoff[1]:c.cutoff[2])){Grade[i] <- "C"}
if(x$Final.Points[i] %in% c(d.cutoff[1]:d.cutoff[2])){Grade[i] <- "D"}
if(x$Final.Points[i] < d.cutoff[1]){Grade[i] <- "E"}
}
assign("letter.grades", Grade, envir = .GlobalEnv)
}
data_course_letter_grades(df)
df$LetterGrade <- letter.grades
View(df)
cbind(row.names(df),df$LetterGrade)
df = read.csv("Data/Fake_grade_data.csv")
row.names(df) <- df$Student
df$Student <- NULL
totals <- rowSums(df)
df$Final.Points <- totals
data_course_letter_grades = function(x, a.cutoff = 700,
b.cutoff = c(640,699),
c.cutoff = c(560,639),
d.cutoff = c(480,559)){
Grade = c()
for(i in 1:length(row.names(x))){
if(x$Final.Points[i] >= a.cutoff){Grade[i] <- "A"}
if(x$Final.Points[i] %in% c(b.cutoff[1]:b.cutoff[2])){Grade[i] <- "B"}
if(x$Final.Points[i] %in% c(c.cutoff[1]:c.cutoff[2])){Grade[i] <- "C"}
if(x$Final.Points[i] %in% c(d.cutoff[1]:d.cutoff[2])){Grade[i] <- "D"}
if(x$Final.Points[i] < d.cutoff[1]){Grade[i] <- "E"}
}
assign("letter.grades", Grade, envir = .GlobalEnv)
}
data_course_letter_grades(df)
df$LetterGrade <- letter.grades
cbind(row.names(df),df$LetterGrade)
CO2$uptake
CO2$Type
?t.test
t.test(CO2$uptake[CO2$Type == "Quebec"],CO2$uptake[CO2$Type == "Mississippi"])
t =t.test(CO2$uptake[CO2$Type == "Quebec"],CO2$uptake[CO2$Type == "Mississippi"])
summary(t)
