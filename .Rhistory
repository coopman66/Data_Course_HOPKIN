}
y
# find whether any contraband was found
x=1
y=list()
for(i in searchresultscols){
y[[x]] <- df[,i] == TRUE
x=x+1
}
y
df2 = as.data.frame(y)
contraband_found <- apply(df2,1,any)
df$AnyContrabandFound <- contraband_found
summary(df$AnyContrabandFound) # some of these (most?) did not request consent to search
# model whether search was conducted at all instead of whether consent was requested
mod.searchconducted <- glm(data=df, DriverSearchConducted ~ DriverAppxAge * DriverRace, family = "binomial")
summary(mod.searchconducted)
prob_of_search_conducted = predict(df, object = mod.searchconducted,type = "response")
df$ProbOfSearchConducted <- prob_of_search_conducted
ggplot(df,aes(x=DriverAppxAge,y=ProbOfSearchConducted,color=DriverRace)) +
geom_smooth()
ggplot(df,aes(x=DriverRace,y=ProbOfSearchConducted,fill=DriverRace)) +
geom_boxplot()
grep("Found",names(df))
contraband = df[,grep("Found",names(df))]
any(contraband)
rowSums(contraband)
plot(rowSums(contraband))
rowSums(contraband) > 0
request = df[,grep("SearchRequested"),names(df)]
request = df[,grep("SearchRequested",names(df))]
rowSums(request) > 0
rowSums(request)
names(request)
request = df[,grep("ConsentSearchRequested",names(df))]
names(request)
rowSums(request)
rowSums(request) > 0
df$AnySearchRequested <- rowSums(request) > 0
mod.contraband <- glm(data=df, (rowSums(contraband) > 0) ~ DriverAppxAge * DriverRace + AnySearchRequested, family = "binomial")
summary(mod.searchconducted)
summary(mod.contraband)
prob_of_contraband = predict(df, object = mod.contraband,type = "response")
df$AnyContrabandFound <- rowSums(contraband) > 0
mod.contraband <- glm(data=df, AnyContrabandFound ~ DriverAppxAge * DriverRace + AnySearchRequested, family = "binomial")
summary(mod.contraband) # race not predictor of contraband!
prob_of_contraband = predict(df, object = mod.contraband,type = "response")
mod.contraband <- glm(data=df, AnyContrabandFound ~ DriverAppxAge * DriverRace, family = "binomial")
summary(mod.contraband) # race not predictor of contraband, but age is! # search requested did not predict whether contraband found
prob_of_contraband = predict(df, object = mod.contraband,type = "response")
str(df)
df$AnyContrabandFound
plot(df$AnyContrabandFound)
mod.contraband <- glm(data=subset(df,AnySearchRequested == TRUE), AnyContrabandFound ~ DriverAppxAge * DriverRace, family = "binomial")
summary(mod.contraband) # race not predictor of contraband, but age is! # search requested did not predict whether contraband found
prob_of_contraband = predict(subset(df,AnySearchRequested == TRUE), object = mod.contraband,type = "response")
subset(df,AnySearchRequested == TRUE)
searched = subset(df,AnySearchRequested == TRUE)
levels(searched$DriverRace)
unique(searched$DriverRace)
mod.contraband <- glm(data=searched, AnyContrabandFound ~ DriverAppxAge * DriverRace, family = "binomial")
summary(mod.contraband) # race not predictor of contraband!
prob_of_contraband = predict(searched, object = mod.contraband,type = "response")
prob_of_contraband = predict(mod.contraband,type = "response")
prob_of_contraband
searched$ProbOfContraband <- prob_of_contraband
mod.contraband <- glm(data=df, AnyContrabandFound ~ DriverAppxAge * DriverRace, family = "binomial")
summary(mod.contraband) # race not predictor of contraband!
add_predictions(df,mod.contraband,var = "ProbOfContraband",type="response")
names(df)
unique(df$AnyContrabandFound)
unique(df$DriverRace)
summary(mod.contraband) # race not predictor of contraband!
add_predictions(subset(df,DriverRace != "Hawaiian or Pacific Islander"),mod.contraband,var = "ProbOfContraband",type="response")
df2 <- add_predictions(subset(df,DriverRace != "Hawaiian or Pacific Islander"),mod.contraband,var = "ProbOfContraband",type="response")
ggplot(df2,aes(x=DriverAppxAge,y=ProbOfContraband,color=DriverRace)) +
geom_smooth()
contraband
grep("Found",names(df))
names(df2)[grep("Found",names(df))]
alcoholcols = names(df2)[grep("AlcoholFound",names(df))]
alcoholcols
othercols = names(df2)[grep("OtherContrabandFound",names(df))]
drugcols = names(df2)[grep("DrugsFound|DrugParaphernaliaFound",names(df))]
drugcols
stolen = names(df2)[grep("StolenPropertyFound",names(df))]
stolen
stolencols = names(df2)[grep("StolenPropertyFound",names(df))]
weaponcols = names(df2)[grep("WeaponFound",names(df))]
weaponcols
select(df2,alcoholcols)
select(df2,alcoholcols) %>% rowSums()
select(df2,alcoholcols) %>% rowSums() %>% plot()
select(df2,alcoholcols) %>% rowSums() > 0
select(df2,alcoholcols) %>% rowSums() > 0 %>% plot()
sums <- select(df2,alcoholcols) %>% rowSums()
sums >0
plot(sums >0)
sums <- select(df2,othercols) %>% rowSums()
df2$AnyOtherFound <- sums >0
sums <- select(df2,drugcols) %>% rowSums()
df2$AnyDrugsFound <- sums >0
sums <- select(df2,stolencols) %>% rowSums()
df2$AnyStolenFound <- sums >0
sums <- select(df2,weaponcols) %>% rowSums()
df2$AnyWeaponFound <- sums >0
grep("Any*Found",names(df2))
grep("Any.Found",names(df2))
grep("Any",names(df2))
names(df2)
sums <- select(df2,alcoholcols) %>% rowSums()
df2$AnyAlcoholFound <- sums >0
sums <- select(df2,othercols) %>% rowSums()
df2$AnyOtherFound <- sums >0
sums <- select(df2,drugcols) %>% rowSums()
df2$AnyDrugsFound <- sums >0
sums <- select(df2,stolencols) %>% rowSums()
df2$AnyStolenFound <- sums >0
sums <- select(df2,weaponcols) %>% rowSums()
df2$AnyWeaponFound <- sums >0
names(df2)
contraband_columns <- c("AnyOtherFound","AnyDrugsFound","AnyStolenFound","AnyWeaponFound","AnyAlcoholFound")
df2_long = gather(df2,key=ContrabandType,value = Present,contraband_columns)
df2_long[1:10,]
ggplot(df2_long,aes(x=ContrabandType,y=Present,fill=DriverRace)) +
geom_boxplot()
mod.contrabandtype = glm(data = df2_long, Present ~ ContrabandType * DriverRace,family="binomial")
df2_long <- add_predictions(df2_long,mod.contrabandtype,type="response")
ggplot(df2_long,x=ContrabandType,y=pred,fill=DriverRace) +
geom_boxplot()
names(df2_long)
df2_long$pred
ggplot(df2_long,aes(x=ContrabandType,y=pred,fill=DriverRace)) +
geom_boxplot()
mod.contrabandtype = glm(data = df2_long, Present ~ ContrabandType * DriverRace + DriverAppxAge,family="binomial")
df2_long <- add_predictions(df2_long,mod.contrabandtype,type="response")
ggplot(df2_long,aes(x=DriverAppxAge,y=pred,fill=DriverRace)) +
geom_boxplot() +
facet_wrap(~ContrabandType)
ggplot(df2_long,aes(x=DriverAppxAge,y=pred,fill=DriverRace)) +
geom_smooth() +
facet_wrap(~ContrabandType)
ggplot(df2_long,aes(x=DriverAppxAge,y=pred,color=DriverRace)) +
geom_smooth() +
facet_wrap(~ContrabandType)
names(df)
mod.contrabandtype = glm(data = df2_long, Present ~ ContrabandType * DriverRace + DriverAppxAge + ReasonForStop,family="binomial")
df2_long <- add_predictions(df2_long,mod.contrabandtype,type="response")
ggplot(df2_long,aes(x=DriverAppxAge,y=pred,color=DriverRace)) +
geom_smooth() +
facet_wrap(~ReasonForStop)
summary(mod.contrabandtype)
ggplot(df2_long,aes(x=ContrabandType,y=pred,color=DriverRace)) +
geom_boxplot() +
facet_wrap(~ReasonForStop)
# load packages
library(tidyverse)
library(modelr)
# load cleaned data ####
df = readRDS("./StudentRepos/Fa2019/Data_Course_Edwards/Illinois_Traffic_Stops/cleaned_data.RDS")
plot(table(df$AgencyType,df$ReasonForStop))
plot(table(df$AgencyType,df$TypeOfMovingViolation))
plot(table(df$DriverRace,df$ReasonForStop))
ggplot(df,aes(x=DriverAppxAge,fill=DriverConsentSearchRequested)) +
geom_density(alpha=.5) +
facet_wrap(~DriverRace)
# model probability of search being requested ~ age and race and interaction ####
mod.consentrequested <- glm(data=df, DriverConsentSearchRequested ~ DriverAppxAge * DriverRace, family = "binomial")
summary(mod.consentrequested)
prob_of_search_request = predict(df, object = mod.consentrequested,type = "response")
df$ProbOfSearchRequested <- prob_of_search_request
ggplot(df,aes(x=DriverAppxAge,y=ProbOfSearchRequested,color=DriverRace)) +
geom_smooth()
# of those search-requested, model probability of finding contraband ####
searchresultscols <- grep("Found",names(df))
# Check levels to make sure they're all T/F/NA
x=1
y=list()
for(i in searchresultscols){
y[[x]] <- unique(df[,i])
x=x+1
}
y
# find whether any contraband was found
x=1
y=list()
for(i in searchresultscols){
y[[x]] <- df[,i] == TRUE
x=x+1
}
y
df2 = as.data.frame(y)
contraband_found <- apply(df2,1,any)
df$AnyContrabandFound <- contraband_found
summary(df$AnyContrabandFound) # some of these (most?) did not request consent to search
# model whether search was conducted at all instead of whether consent was requested
mod.searchconducted <- glm(data=df, DriverSearchConducted ~ DriverAppxAge * DriverRace, family = "binomial")
summary(mod.searchconducted)
prob_of_search_conducted = predict(df, object = mod.searchconducted,type = "response")
df$ProbOfSearchConducted <- prob_of_search_conducted
ggplot(df,aes(x=DriverAppxAge,y=ProbOfSearchConducted,color=DriverRace)) +
geom_smooth()
ggplot(df,aes(x=DriverRace,y=ProbOfSearchConducted,fill=DriverRace)) +
geom_boxplot()
#model whether search yielded contraband, given a search was conducted
# which rows had contraband found? double-check for sanity.
contraband = df[,grep("Found",names(df))]
df$AnyContrabandFound <- rowSums(contraband) > 0
# which rows had some search requested?
request = df[,grep("ConsentSearchRequested",names(df))]
names(request)
rowSums(request) > 0
df$AnySearchRequested <- rowSums(request) > 0
searched = subset(df,AnySearchRequested == TRUE)
mod.contraband <- glm(data=df, AnyContrabandFound ~ DriverAppxAge * DriverRace, family = "binomial")
summary(mod.contraband) # race not predictor of contraband!
# leave out Hawaiian or Pacific Islander..... for some reason model does not include them!??
df2 <- add_predictions(subset(df,DriverRace != "Hawaiian or Pacific Islander"),mod.contraband,var = "ProbOfContraband",type="response")
ggplot(df2,aes(x=DriverAppxAge,y=ProbOfContraband,color=DriverRace)) +
geom_smooth() + labs(title = "Given a search, probability of finding contraband of any sort",
subtitle = "Hawaiian or Pacific Islanders excluded due to low sample size")
# what sorts of contraband were discovered? ####
names(df2)[grep("Found",names(df))]
alcoholcols = names(df2)[grep("AlcoholFound",names(df))]
othercols = names(df2)[grep("OtherContrabandFound",names(df))]
drugcols = names(df2)[grep("DrugsFound|DrugParaphernaliaFound",names(df))]
stolencols = names(df2)[grep("StolenPropertyFound",names(df))]
weaponcols = names(df2)[grep("WeaponFound",names(df))]
sums <- select(df2,alcoholcols) %>% rowSums()
df2$AnyAlcoholFound <- sums >0
sums <- select(df2,othercols) %>% rowSums()
df2$AnyOtherFound <- sums >0
sums <- select(df2,drugcols) %>% rowSums()
df2$AnyDrugsFound <- sums >0
sums <- select(df2,stolencols) %>% rowSums()
df2$AnyStolenFound <- sums >0
sums <- select(df2,weaponcols) %>% rowSums()
df2$AnyWeaponFound <- sums >0
# find those last colnames
contraband_columns <- c("AnyOtherFound","AnyDrugsFound","AnyStolenFound","AnyWeaponFound","AnyAlcoholFound")
# gather by contraband type
df2_long = gather(df2,key=ContrabandType,value = Present,contraband_columns)
#model and predict
mod.contrabandtype = glm(data = df2_long, Present ~ ContrabandType * DriverRace + DriverAppxAge + ReasonForStop,family="binomial")
df2_long <- add_predictions(df2_long,mod.contrabandtype,type="response")
summary(mod.contrabandtype)
# plot
ggplot(df2_long,aes(x=ContrabandType,y=pred,color=DriverRace)) +
geom_boxplot() +
facet_wrap(~ReasonForStop) +
labs(y="Probability of finding given contraband, given a search")
library(readr)
library(tidyverse)
library(skimr)
# handy function
'%ni%' = Negate('%in%')
# use the edited version, with all rows with ambiguous "~~" have been excluded
df = readr::read_delim("StudentRepos/Fa2019/Data_Course_Edwards/Illinois_Traffic_Stops/2017 ITSS Data_edited.txt",delim = "~",col_names = TRUE,na = "0",
col_types = cols(
AgencyName = col_character(),
AgencyCode = col_double(),
DateOfStop = col_date(),
TimeOfStop = col_time(),
DurationOfStop = col_double(),
ZIP = col_double(),
VehicleMake = col_character(),
VehicleYear = col_double(),
DriversYearofBirth = col_double(),
DriverSex = col_factor(),
DriverRace = col_factor(),
ReasonForStop = col_factor(),
TypeOfMovingViolation = col_factor(),
ResultOfStop = col_factor(),
BeatLocationOfStop = col_factor(),
VehicleConsentSearchRequested = col_factor(),
VehicleConsentGiven = col_factor(),
VehicleSearchConducted = col_factor(),
VehicleSearchConductedBy = col_factor(),
VehicleContrabandFound = col_factor(),
VehicleDrugsFound = col_factor(),
VehicleDrugParaphernaliaFound = col_factor(),
VehicleAlcoholFound = col_factor(),
VehicleWeaponFound = col_factor(),
VehicleStolenPropertyFound = col_factor(),
VehicleOtherContrabandFound = col_factor(),
VehicleDrugAmount = col_factor(),
DriverConsentSearchRequested = col_factor(),
DriverConsentGiven = col_factor(),
DriverSearchConducted = col_factor(),
DriverSearchConductedBy = col_factor(),
PassengerConsentSearchRequested = col_factor(),
PassengerConsentGiven = col_factor(),
PassengerSearchConducted = col_factor(),
PassengerSearchConductedBy = col_factor(),
DriverPassengerContrabandFound = col_factor(),
DriverPassengerDrugsFound = col_factor(),
DriverPassengerDrugParaphernaliaFound = col_factor(),
DriverPassengerAlcoholFound = col_factor(),
DriverPassengerWeaponFound = col_factor(),
DriverPassengerStolenPropertyFound = col_factor(),
DriverPassengerOtherContrabandFound = col_factor(),
DriverPassengerDrugAmount = col_factor(),
PoliceDogPerformSniffOfVehicle = col_factor(),
PoliceDogAlertIfSniffed = col_factor(),
PoliceDogVehicleSearched = col_factor(),
PoliceDogContrabandFound = col_factor(),
PoliceDogDrugsFound = col_factor(),
PoliceDogDrugParaphernaliaFound = col_factor(),
PoliceDogAlcoholFound = col_factor(),
PoliceDogWeaponFound = col_factor(),
PoliceDogStolenPropertyFound = col_factor(),
PoliceDogOtherContrabandFound = col_factor(),
PoliceDogDrugAmount = col_factor()
)
)
# temporary subset
# df = df[1:5000,]
df= as.data.frame(df)
# make list of logical columns
logical_cols <- c("VehicleConsentSearchRequested","VehicleConsentGiven","VehicleSearchConducted",
"VehicleContrabandFound","VehicleDrugsFound",
"VehicleDrugParaphernaliaFound","VehicleAlcoholFound","VehicleWeaponFound",
"VehicleStolenPropertyFound","VehicleOtherContrabandFound","DriverConsentSearchRequested","DriverConsentGiven","DriverSearchConducted",
"PassengerConsentSearchRequested","PassengerConsentGiven","PassengerSearchConducted","DriverPassengerContrabandFound",
"DriverPassengerDrugsFound","DriverPassengerDrugParaphernaliaFound","DriverPassengerAlcoholFound",
"DriverPassengerWeaponFound","DriverPassengerStolenPropertyFound","DriverPassengerOtherContrabandFound",
"PoliceDogPerformSniffOfVehicle","PoliceDogAlertIfSniffed",
"PoliceDogVehicleSearched","PoliceDogContrabandFound","PoliceDogDrugsFound",
"PoliceDogDrugParaphernaliaFound","PoliceDogAlcoholFound","PoliceDogWeaponFound",
"PoliceDogStolenPropertyFound","PoliceDogOtherContrabandFound")
# make list of all the levels found in those columns
z=list()
y=1
for(i in logical_cols){
x=levels(df[,i])
z[[y]] <- x
y=y+1
}
names(z) <- logical_cols
z
#that's really ugly! ... use mapvalues to change factors
unique(unlist(z))
logical_cols
unique(unlist(z))
z=list()
y=1
for(i in logical_cols){
x=levels(df[,i])
z[[y]] <- x
y=y+1
}
names(z) <- logical_cols
z
#that's really ugly! ... use mapvalues to change factors
# get list of all possible values in what should be: 0=NA, 1=TRUE, 2=FALSE
unique(unlist(z))
# change 2,1,0 to T,F,NA in all logical columns
for(column in logical_cols){
df[,column] <- as.logical(factor(plyr::mapvalues(x = df[,column],from = unique(unlist(z)),to=c(FALSE,TRUE))))
}
df$DriverSex <-  plyr::mapvalues(df$DriverSex,from = c(2,1),to=c("Female","Male"))
# driver race
df$DriverRace <- plyr::mapvalues(df$DriverRace,from = levels(df$DriverRace),
to=c("White", "Black", "Hispanic or Latino", "Asian","Native American", "Hawaiian or Pacific Islander"))
# reason for stop
df$ReasonForStop <- plyr::mapvalues(df$ReasonForStop,from=levels(df$ReasonForStop),
to=c("Equipment","License Plate/Registration","Moving Violation","Commercial Vehicle"))
# type of moving violation
df$TypeOfMovingViolation <- plyr::mapvalues(df$TypeOfMovingViolation,from=levels(df$TypeOfMovingViolation),
to=c("Traffic Sign or Signal","Lane Violation","Speed","Other","Follow Too Close","Seat Belt"))
# result of stop
df$ResultOfStop <- plyr::mapvalues(df$ResultOfStop,from = levels(df$ResultOfStop),
to=c("Written Warning","Citation","Verbal Warning"))
# vehicle drug amount
df$VehicleDrugAmount <- plyr::mapvalues(df$VehicleDrugAmount,from=levels(df$VehicleDrugAmount),
to=c("<2 g","2-10 g",">100 g","11-50 g","51-100 g"))
df$VehicleDrugAmount <- ordered(df$VehicleDrugAmount,levels=c("<2 g","2-10 g","11-50 g","51-100 g",">100 g"))
# person drug amount
df$DriverPassengerDrugAmount <- plyr::mapvalues(df$DriverPassengerDrugAmount,from = levels(df$DriverPassengerDrugAmount),
to=c("2-10 g","<2 g","11-50 g","51-100 g",">100 g"))
df$DriverPassengerDrugAmount <- ordered(df$DriverPassengerDrugAmount,levels=c("<2 g","2-10 g","11-50 g","51-100 g",">100 g"))
# dog drug amount
df$PoliceDogDrugAmount <- plyr::mapvalues(df$PoliceDogDrugAmount,from=levels(df$PoliceDogDrugAmount),
to=c("<2 g","2-10 g","11-50 g",">100 g","51-100 g"))
df$PoliceDogDrugAmount <- ordered(df$PoliceDogDrugAmount,levels=c("<2 g","2-10 g","11-50 g","51-100 g",">100 g"))
# searches conducted by....
df$DriverSearchConductedBy <- plyr::mapvalues(df$DriverSearchConductedBy,from = levels(df$DriverSearchConductedBy),
to=c("Other","Consent"))
df$VehicleSearchConductedBy <- plyr::mapvalues(df$VehicleSearchConductedBy,from=levels(df$VehicleSearchConductedBy),
to=c("Other","Consent"))
df$PassengerSearchConductedBy <- plyr::mapvalues(df$PassengerSearchConductedBy,from = levels(df$PassengerSearchConductedBy),
to=c("Consent","Other"))
missingdates = which(is.na(df$DateOfStop))
df <- df[-c(missingdates),]
df$DateTime = as.POSIXct(paste(as.character(df$DateOfStop),as.character(df$TimeOfStop)),tz="CST")
df$DateTime
df$DriversBirthDate <- as.Date(paste0(df$DriversYearofBirth,"-01-01"))
df$DriverAppxAge <- as.numeric(round(difftime(df$DateOfStop,df$DriversBirthDate,units = "weeks") / 52))
df$ZIP <- as.factor(df$ZIP)
# Skim data to check up on it
skim(df)
unique(df$AgencyName)
county = grep("COUNTY SHERIFF",df$AgencyName)
university = grep("UNIVERSITY POLICE|COLLEGE POLICE",df$AgencyName)
forest = grep("FOREST ",df$AgencyName)
municipal = which(1:nrow(df) %ni% forest & 1:nrow(df) %ni% county & 1:nrow(df) %ni% university)
# make new column
df$AgencyType = factor(NA,levels = c("County","Municipal","University","Forest"))
# fill it
df$AgencyType[county] <- "County"
df$AgencyType[municipal] <- "Municipal"
df$AgencyType[university] <- "University"
df$AgencyType[forest] <- "Forest"
library(tidyverse)
library(modelr)
# load cleaned data ####
df = readRDS("./StudentRepos/Fa2019/Data_Course_Edwards/Illinois_Traffic_Stops/cleaned_data.RDS")
plot(table(df$AgencyType,df$ReasonForStop))
plot(table(df$AgencyType,df$TypeOfMovingViolation))
plot(table(df$DriverRace,df$ReasonForStop))
ggplot(df,aes(x=DriverAppxAge,fill=DriverConsentSearchRequested)) +
geom_density(alpha=.5) +
facet_wrap(~DriverRace)
mod.consentrequested <- glm(data=df, DriverConsentSearchRequested ~ DriverAppxAge * DriverRace, family = "binomial")
summary(mod.consentrequested)
prob_of_search_request = predict(df, object = mod.consentrequested,type = "response")
df$ProbOfSearchRequested <- prob_of_search_request
ggplot(df,aes(x=DriverAppxAge,y=ProbOfSearchRequested,color=DriverRace)) +
geom_smooth()
ggplot(df,aes(x=DriverAppxAge,y=ProbOfSearchRequested,color=DriverRace)) +
geom_smooth(se=TRUE)
names(df)
searchresultscols <- grep("Found",names(df))
searchresultscols
x=1
y=list()
for(i in searchresultscols){
y[[x]] <- unique(df[,i])
x=x+1
}
y
# find whether any contraband was found
x=1
y=list()
for(i in searchresultscols){
y[[x]] <- df[,i] == TRUE
x=x+1
}
y
df2 = as.data.frame(y)
df2
contraband_found <- apply(df2,1,any)
summary(df$AnyContrabandFound) # some of these (most?) did not request consent to search
df$AnyContrabandFound <- contraband_found
summary(df$AnyContrabandFound) # some of these (most?) did not request consent to search
mod.searchconducted <- glm(data=df, DriverSearchConducted ~ DriverAppxAge * DriverRace, family = "binomial")
summary(mod.searchconducted)
prob_of_search_conducted = predict(df, object = mod.searchconducted,type = "response")
df$ProbOfSearchConducted <- prob_of_search_conducted
ggplot(df,aes(x=DriverAppxAge,y=ProbOfSearchConducted,color=DriverRace)) +
geom_smooth()
ggplot(df,aes(x=DriverRace,y=ProbOfSearchConducted,fill=DriverRace)) +
geom_boxplot()
contraband = df[,grep("Found",names(df))]
df$AnyContrabandFound <- rowSums(contraband) > 0
request = df[,grep("ConsentSearchRequested",names(df))]
names(request)
rowSums(request) > 0
df$AnySearchRequested <- rowSums(request) > 0
searched = subset(df,AnySearchRequested == TRUE)
mod.contraband <- glm(data=df, AnyContrabandFound ~ DriverAppxAge * DriverRace, family = "binomial")
summary(mod.contraband) # race not predictor of contraband!
# leave out Hawaiian or Pacific Islander..... for some reason model does not include them!??
df2 <- add_predictions(subset(df,DriverRace != "Hawaiian or Pacific Islander"),mod.contraband,var = "ProbOfContraband",type="response")
ggplot(df2,aes(x=DriverAppxAge,y=ProbOfContraband,color=DriverRace)) +
geom_smooth() + labs(title = "Given a search, probability of finding contraband of any sort",
subtitle = "Hawaiian or Pacific Islanders excluded due to low sample size")
names(df2)[grep("Found",names(df))]
alcoholcols = names(df2)[grep("AlcoholFound",names(df))]
othercols = names(df2)[grep("OtherContrabandFound",names(df))]
drugcols = names(df2)[grep("DrugsFound|DrugParaphernaliaFound",names(df))]
stolencols = names(df2)[grep("StolenPropertyFound",names(df))]
weaponcols = names(df2)[grep("WeaponFound",names(df))]
sums <- select(df2,alcoholcols) %>% rowSums()
df2$AnyAlcoholFound <- sums >0
sums <- select(df2,othercols) %>% rowSums()
df2$AnyOtherFound <- sums >0
sums <- select(df2,drugcols) %>% rowSums()
df2$AnyDrugsFound <- sums >0
sums <- select(df2,stolencols) %>% rowSums()
df2$AnyStolenFound <- sums >0
sums <- select(df2,weaponcols) %>% rowSums()
df2$AnyWeaponFound <- sums >0
# find those last colnames
contraband_columns <- c("AnyOtherFound","AnyDrugsFound","AnyStolenFound","AnyWeaponFound","AnyAlcoholFound")
# gather by contraband type
df2_long = gather(df2,key=ContrabandType,value = Present,contraband_columns)
#model and predict
mod.contrabandtype = glm(data = df2_long, Present ~ ContrabandType * DriverRace + DriverAppxAge + ReasonForStop,family="binomial")
df2_long <- add_predictions(df2_long,mod.contrabandtype,type="response")
summary(mod.contrabandtype)
# plot
ggplot(df2_long,aes(x=ContrabandType,y=pred,color=DriverRace)) +
geom_boxplot() +
facet_wrap(~ReasonForStop) +
labs(y="Probability of finding given contraband, given a search")
names(df)
df3=group_by(df,DriverRace,AgencyName) %>%
summarise(CONSENT=sum(VehicleConsentGiven))
df3
df$VehicleAlcoholFound
sum(df$VehicleAlcoholFound)
