#there is almost certainly a better and faster way to do this. But this works and is fast enough.
tax_table$guild <- NA
#phylum level match.
tax_table$guild <- ifelse(tax_table$phylum %in% fg$taxon,
fg[match(tax_table$phylum, fg$taxon),c(4,5,6,7,8,9)],
tax_table$guild)
#class level match.
tax_table$guild <- ifelse(tax_table$class %in% fg$taxon,
fg[match(tax_table$class, fg$taxon),c(4,5,6,7,8,9)],
tax_table$guild)
#order level match.
tax_table$guild <- ifelse(tax_table$order %in% fg$taxon,
fg[match(tax_table$order, fg$taxon),c(4,5,6,7,8,9)],
tax_table$guild)
#family level match.
tax_table$guild <- ifelse(tax_table$family %in% fg$taxon,
fg[match(tax_table$family, fg$taxon),c(4,5,6,7,8,9)],
tax_table$guild)
#genus level match.
tax_table$guild <- ifelse(tax_table$genus %in% fg$taxon,
fg[match(tax_table$genus, fg$taxon),c(4,5,6,7,8,9)],
tax_table$guild)
#species level match.
tax_table$guild <- ifelse(tax_table$species %in% fg$taxon,
fg[match(tax_table$species, fg$taxon),c(4,5,6,7,8,9)],
tax_table$guild)
#report and return output.
cat(sum(!is.na(tax_table$guild))/(nrow(tax_table))*100,'% of fungal taxa assigned a functional guild.', sep = '')
return(tax_table$guild)
assign("assigned_tax_table", tax_table, envir = .GlobalEnv)
}
#Test the function.
test <- fg_assign(tax_table)
#function to assign species based on funguild
#takes a taxonomy table with kingdom/phylum/class/order/family/genus/species as separate columns with those names in lower case.
#returns a vector of FunGuild fucntional assignments.
#depends on R packages rvest, jsonlite.
##Testing the function - generate some artifical data to assign guild to.
#tax_table <- structure(list(taxonomy = "k__Fungi; p__Ascomycota; c__Pezizomycetes; o__Pezizales; f__Tuberaceae; g__Tuber; s__Tuber melosporum",
#kingdom = "Fungi", phylum = "Ascomycota", class = "Pezizomycetes",
#order = "Pezizales", family = "Tuberaceae", genus = "Tuber",
#species = "Tuber melosporum"), .Names = c("taxonomy", "kingdom",
#                                          "phylum", "class", "order", "family", "genus", "species"), row.names = 4L, class = "data.frame")
##Test the function.
#test <- fg_assign(tax_table)
tax_table <- structure(list(taxonomy = "k__Fungi; p__Ascomycota; c__Pezizomycetes; o__Pezizales; f__Tuberaceae; g__Tuber; s__Tuber melosporum",
kingdom = "Fungi", phylum = "Ascomycota", class = "Pezizomycetes",
order = "Pezizales", family = "Tuberaceae", genus = "Tuber",
species = "Tuber melosporum"), .Names = c("taxonomy", "kingdom",
"phylum", "class", "order", "family", "genus", "species"), row.names = 4L, class = "data.frame")
fg_assign <- function(tax_table){
#path to FUNGuild database
url <- "http://www.stbates.org/funguild_db.php"
#download database, convert it to something R interpretable.
fg <- url %>%
xml2::read_html() %>%
rvest::html_text()
fg <- jsonlite::fromJSON(gsub("funguild_db", "", fg))
#There are 9 unique levels of taxonomic resolution actually in FUNGuild (though 24 potential levels)
#0-keyword, 3-Phylum, 7-Order, 9-Family, 13-genus, 20species, 21-subspecies, 24-Form
#I only have data on k/c/p/o/f/g/s, so only going to deal with levels 3,7,9,13,20
#What follows is a series of if statements to assign function
#start with highest level of taxonomy and go down.
#there is almost certainly a better and faster way to do this. But this works and is fast enough.
tax_table$guild <- NA
#phylum level match.
tax_table$guild <- ifelse(tax_table$phylum %in% fg$taxon,
fg[match(tax_table$phylum, fg$taxon),c(4,5,6,7,8,9)],
tax_table$guild)
#class level match.
tax_table$guild <- ifelse(tax_table$class %in% fg$taxon,
fg[match(tax_table$class, fg$taxon),c(4,5,6,7,8,9)],
tax_table$guild)
#order level match.
tax_table$guild <- ifelse(tax_table$order %in% fg$taxon,
fg[match(tax_table$order, fg$taxon),c(4,5,6,7,8,9)],
tax_table$guild)
#family level match.
tax_table$guild <- ifelse(tax_table$family %in% fg$taxon,
fg[match(tax_table$family, fg$taxon),c(4,5,6,7,8,9)],
tax_table$guild)
#genus level match.
tax_table$guild <- ifelse(tax_table$genus %in% fg$taxon,
fg[match(tax_table$genus, fg$taxon),5],
tax_table$guild)
#species level match.
tax_table$guild <- ifelse(tax_table$species %in% fg$taxon,
fg[match(tax_table$species, fg$taxon),c(4,5,6,7,8,9)],
tax_table$guild)
#report and return output.
cat(sum(!is.na(tax_table$guild))/(nrow(tax_table))*100,'% of fungal taxa assigned a functional guild.', sep = '')
return(tax_table$guild)
assign("assigned_tax_table", tax_table, envir = .GlobalEnv)
}
test <- fg_assign(tax_table)
View(assigned_tax_table)
View(tax_table)
which(fg$taxon == "Tuber")
View(fg)
fg[which(fg$taxon == "Tuber"),]
#function to assign species based on funguild
#takes a taxonomy table with kingdom/phylum/class/order/family/genus/species as separate columns with those names in lower case.
#returns a vector of FunGuild fucntional assignments.
#depends on R packages rvest, jsonlite.
##Testing the function - generate some artifical data to assign guild to.
#tax_table <- structure(list(taxonomy = "k__Fungi; p__Ascomycota; c__Pezizomycetes; o__Pezizales; f__Tuberaceae; g__Tuber; s__Tuber melosporum",
#kingdom = "Fungi", phylum = "Ascomycota", class = "Pezizomycetes",
#order = "Pezizales", family = "Tuberaceae", genus = "Tuber",
#species = "Tuber melosporum"), .Names = c("taxonomy", "kingdom",
#                                          "phylum", "class", "order", "family", "genus", "species"), row.names = 4L, class = "data.frame")
##Test the function.
#test <- fg_assign(tax_table)
tax_table <- structure(list(taxonomy = "k__Fungi; p__Ascomycota; c__Pezizomycetes; o__Pezizales; f__Tuberaceae; g__Tuber; s__Tuber melosporum",
kingdom = "Fungi", phylum = "Ascomycota", class = "Pezizomycetes",
order = "Pezizales", family = "Tuberaceae", genus = "Tuber",
species = "Tuber melosporum"), .Names = c("taxonomy", "kingdom",
"phylum", "class", "order", "family", "genus", "species"), row.names = 4L, class = "data.frame")
fg_assign <- function(tax_table){
#path to FUNGuild database
url <- "http://www.stbates.org/funguild_db.php"
#download database, convert it to something R interpretable.
fg <- url %>%
xml2::read_html() %>%
rvest::html_text()
fg <- jsonlite::fromJSON(gsub("funguild_db", "", fg))
#There are 9 unique levels of taxonomic resolution actually in FUNGuild (though 24 potential levels)
#0-keyword, 3-Phylum, 7-Order, 9-Family, 13-genus, 20species, 21-subspecies, 24-Form
#I only have data on k/c/p/o/f/g/s, so only going to deal with levels 3,7,9,13,20
#What follows is a series of if statements to assign function
#start with highest level of taxonomy and go down.
#there is almost certainly a better and faster way to do this. But this works and is fast enough.
tax_table$guild <- NA
#phylum level match.
tax_table$guild <- ifelse(tax_table$phylum %in% fg$taxon,
fg[match(tax_table$phylum, fg$taxon),c(4,5,6,7,8,9)],
tax_table$guild)
#class level match.
tax_table$guild <- ifelse(tax_table$class %in% fg$taxon,
fg[match(tax_table$class, fg$taxon),c(4,5,6,7,8,9)],
tax_table$guild)
#order level match.
tax_table$guild <- ifelse(tax_table$order %in% fg$taxon,
fg[match(tax_table$order, fg$taxon),c(4,5,6,7,8,9)],
tax_table$guild)
#family level match.
tax_table$guild <- ifelse(tax_table$family %in% fg$taxon,
fg[match(tax_table$family, fg$taxon),c(4,5,6,7,8,9)],
tax_table$guild)
#genus level match.
tax_table$guild <- ifelse(tax_table$genus %in% fg$taxon,
fg[match(tax_table$genus, fg$taxon),c(5,4,6,7,8,9)],
tax_table$guild)
#species level match.
tax_table$guild <- ifelse(tax_table$species %in% fg$taxon,
fg[match(tax_table$species, fg$taxon),c(4,5,6,7,8,9)],
tax_table$guild)
#report and return output.
cat(sum(!is.na(tax_table$guild))/(nrow(tax_table))*100,'% of fungal taxa assigned a functional guild.', sep = '')
return(tax_table$guild)
assign("assigned_tax_table", tax_table, envir = .GlobalEnv)
}
#Test the function.
test <- fg_assign(tax_table)
View(assigned_tax_table)
View(fg)
a <- c("a","b","c")
paste0(a)
#function to assign species based on funguild
#takes a taxonomy table with kingdom/phylum/class/order/family/genus/species as separate columns with those names in lower case.
#returns a vector of FunGuild fucntional assignments.
#depends on R packages rvest, jsonlite.
##Testing the function - generate some artifical data to assign guild to.
#tax_table <- structure(list(taxonomy = "k__Fungi; p__Ascomycota; c__Pezizomycetes; o__Pezizales; f__Tuberaceae; g__Tuber; s__Tuber melosporum",
#kingdom = "Fungi", phylum = "Ascomycota", class = "Pezizomycetes",
#order = "Pezizales", family = "Tuberaceae", genus = "Tuber",
#species = "Tuber melosporum"), .Names = c("taxonomy", "kingdom",
#                                          "phylum", "class", "order", "family", "genus", "species"), row.names = 4L, class = "data.frame")
##Test the function.
#test <- fg_assign(tax_table)
tax_table <- structure(list(taxonomy = "k__Fungi; p__Ascomycota; c__Pezizomycetes; o__Pezizales; f__Tuberaceae; g__Tuber; s__Tuber melosporum",
kingdom = "Fungi", phylum = "Ascomycota", class = "Pezizomycetes",
order = "Pezizales", family = "Tuberaceae", genus = "Tuber",
species = "Tuber melosporum"), .Names = c("taxonomy", "kingdom",
"phylum", "class", "order", "family", "genus", "species"), row.names = 4L, class = "data.frame")
fg_assign <- function(tax_table){
#path to FUNGuild database
url <- "http://www.stbates.org/funguild_db.php"
#download database, convert it to something R interpretable.
fg <- url %>%
xml2::read_html() %>%
rvest::html_text()
fg <- jsonlite::fromJSON(gsub("funguild_db", "", fg))
#There are 9 unique levels of taxonomic resolution actually in FUNGuild (though 24 potential levels)
#0-keyword, 3-Phylum, 7-Order, 9-Family, 13-genus, 20species, 21-subspecies, 24-Form
#I only have data on k/c/p/o/f/g/s, so only going to deal with levels 3,7,9,13,20
#What follows is a series of if statements to assign function
#start with highest level of taxonomy and go down.
#there is almost certainly a better and faster way to do this. But this works and is fast enough.
tax_table$guild <- NA
#phylum level match.
tax_table$guild <- ifelse(tax_table$phylum %in% fg$taxon,
fg[match(tax_table$phylum, fg$taxon),c(4,5,6,7,8,9)],
tax_table$guild)
#class level match.
tax_table$guild <- ifelse(tax_table$class %in% fg$taxon,
fg[match(tax_table$class, fg$taxon),c(4,5,6,7,8,9)],
tax_table$guild)
#order level match.
tax_table$guild <- ifelse(tax_table$order %in% fg$taxon,
fg[match(tax_table$order, fg$taxon),c(4,5,6,7,8,9)],
tax_table$guild)
#family level match.
tax_table$guild <- ifelse(tax_table$family %in% fg$taxon,
fg[match(tax_table$family, fg$taxon),c(4,5,6,7,8,9)],
tax_table$guild)
#genus level match.
tax_table$guild <- ifelse(tax_table$genus %in% fg$taxon,
fg[match(tax_table$genus, fg$taxon),c(5,4,6,7,8,9)],
tax_table$guild)
#species level match.
tax_table$guild <- ifelse(tax_table$species %in% fg$taxon,
fg[match(tax_table$species, fg$taxon),c(4,5,6,7,8,9)],
tax_table$guild)
#report and return output.
cat(sum(!is.na(tax_table$guild))/(nrow(tax_table))*100,'% of fungal taxa assigned a functional guild.', sep = '')
return(tax_table)
assign("assigned_tax_table", tax_table, envir = .GlobalEnv)
}
#Test the function.
test <- fg_assign(tax_table)
a <- c("a","b","c")
View(test)
#function to assign species based on funguild
#takes a taxonomy table with kingdom/phylum/class/order/family/genus/species as separate columns with those names in lower case.
#returns a vector of FunGuild fucntional assignments.
#depends on R packages rvest, jsonlite.
##Testing the function - generate some artifical data to assign guild to.
#tax_table <- structure(list(taxonomy = "k__Fungi; p__Ascomycota; c__Pezizomycetes; o__Pezizales; f__Tuberaceae; g__Tuber; s__Tuber melosporum",
#kingdom = "Fungi", phylum = "Ascomycota", class = "Pezizomycetes",
#order = "Pezizales", family = "Tuberaceae", genus = "Tuber",
#species = "Tuber melosporum"), .Names = c("taxonomy", "kingdom",
#                                          "phylum", "class", "order", "family", "genus", "species"), row.names = 4L, class = "data.frame")
##Test the function.
#test <- fg_assign(tax_table)
tax_table <- structure(list(taxonomy = "k__Fungi; p__Ascomycota; c__Pezizomycetes; o__Pezizales; f__Tuberaceae; g__Tuber; s__Tuber melosporum",
kingdom = "Fungi", phylum = "Ascomycota", class = "Pezizomycetes",
order = "Pezizales", family = "Tuberaceae", genus = "Tuber",
species = "Tuber melosporum"), .Names = c("taxonomy", "kingdom",
"phylum", "class", "order", "family", "genus", "species"), row.names = 4L, class = "data.frame")
fg_assign <- function(tax_table){
#path to FUNGuild database
url <- "http://www.stbates.org/funguild_db.php"
#download database, convert it to something R interpretable.
fg <- url %>%
xml2::read_html() %>%
rvest::html_text()
fg <- jsonlite::fromJSON(gsub("funguild_db", "", fg))
#There are 9 unique levels of taxonomic resolution actually in FUNGuild (though 24 potential levels)
#0-keyword, 3-Phylum, 7-Order, 9-Family, 13-genus, 20species, 21-subspecies, 24-Form
#I only have data on k/c/p/o/f/g/s, so only going to deal with levels 3,7,9,13,20
#What follows is a series of if statements to assign function
#start with highest level of taxonomy and go down.
#there is almost certainly a better and faster way to do this. But this works and is fast enough.
tax_table$guild <- NA
#phylum level match.
assignments <- ifelse(tax_table$phylum %in% fg$taxon,
fg[match(tax_table$phylum, fg$taxon),c(4,5,6,7,8,9)],
tax_table$guild)
#class level match.
assignments <- ifelse(tax_table$class %in% fg$taxon,
fg[match(tax_table$class, fg$taxon),c(4,5,6,7,8,9)],
tax_table$guild)
#order level match.
assignments <- ifelse(tax_table$order %in% fg$taxon,
fg[match(tax_table$order, fg$taxon),c(4,5,6,7,8,9)],
tax_table$guild)
#family level match.
assignments <- ifelse(tax_table$family %in% fg$taxon,
fg[match(tax_table$family, fg$taxon),c(4,5,6,7,8,9)],
tax_table$guild)
#genus level match.
assignments <- ifelse(tax_table$genus %in% fg$taxon,
fg[match(tax_table$genus, fg$taxon),c(5,4,6,7,8,9)],
tax_table$guild)
#species level match.
assignments <- ifelse(tax_table$species %in% fg$taxon,
fg[match(tax_table$species, fg$taxon),c(4,5,6,7,8,9)],
tax_table$guild)
#report and return output.
cat(sum(!is.na(tax_table$guild))/(nrow(tax_table))*100,'% of fungal taxa assigned a functional guild.', sep = '')
return(assignments)
assign("assigned_tax_table", tax_table, envir = .GlobalEnv)
}
test <- fg_assign(tax_table)
View(assigned_tax_table)
#function to assign species based on funguild
#takes a taxonomy table with kingdom/phylum/class/order/family/genus/species as separate columns with those names in lower case.
#returns a vector of FunGuild fucntional assignments.
#depends on R packages rvest, jsonlite.
##Testing the function - generate some artifical data to assign guild to.
#tax_table <- structure(list(taxonomy = "k__Fungi; p__Ascomycota; c__Pezizomycetes; o__Pezizales; f__Tuberaceae; g__Tuber; s__Tuber melosporum",
#kingdom = "Fungi", phylum = "Ascomycota", class = "Pezizomycetes",
#order = "Pezizales", family = "Tuberaceae", genus = "Tuber",
#species = "Tuber melosporum"), .Names = c("taxonomy", "kingdom",
#                                          "phylum", "class", "order", "family", "genus", "species"), row.names = 4L, class = "data.frame")
##Test the function.
#test <- fg_assign(tax_table)
tax_table <- structure(list(taxonomy = "k__Fungi; p__Ascomycota; c__Pezizomycetes; o__Pezizales; f__Tuberaceae; g__Tuber; s__Tuber melosporum",
kingdom = "Fungi", phylum = "Ascomycota", class = "Pezizomycetes",
order = "Pezizales", family = "Tuberaceae", genus = "Tuber",
species = "Tuber melosporum"), .Names = c("taxonomy", "kingdom",
"phylum", "class", "order", "family", "genus", "species"), row.names = 4L, class = "data.frame")
fg_assign <- function(tax_table){
#path to FUNGuild database
url <- "http://www.stbates.org/funguild_db.php"
#download database, convert it to something R interpretable.
fg <- url %>%
xml2::read_html() %>%
rvest::html_text()
fg <- jsonlite::fromJSON(gsub("funguild_db", "", fg))
#There are 9 unique levels of taxonomic resolution actually in FUNGuild (though 24 potential levels)
#0-keyword, 3-Phylum, 7-Order, 9-Family, 13-genus, 20species, 21-subspecies, 24-Form
#I only have data on k/c/p/o/f/g/s, so only going to deal with levels 3,7,9,13,20
#What follows is a series of if statements to assign function
#start with highest level of taxonomy and go down.
#there is almost certainly a better and faster way to do this. But this works and is fast enough.
assignments <- NA
#phylum level match.
assignments <- ifelse(tax_table$phylum %in% fg$taxon,
fg[match(tax_table$phylum, fg$taxon),c(4,5,6,7,8,9)],
tax_table$guild)
#class level match.
assignments <- ifelse(tax_table$class %in% fg$taxon,
fg[match(tax_table$class, fg$taxon),c(4,5,6,7,8,9)],
tax_table$guild)
#order level match.
assignments <- ifelse(tax_table$order %in% fg$taxon,
fg[match(tax_table$order, fg$taxon),c(4,5,6,7,8,9)],
tax_table$guild)
#family level match.
assignments <- ifelse(tax_table$family %in% fg$taxon,
fg[match(tax_table$family, fg$taxon),c(4,5,6,7,8,9)],
tax_table$guild)
#genus level match.
assignments <- ifelse(tax_table$genus %in% fg$taxon,
fg[match(tax_table$genus, fg$taxon),c(5,4,6,7,8,9)],
tax_table$guild)
#species level match.
assignments <- ifelse(tax_table$species %in% fg$taxon,
fg[match(tax_table$species, fg$taxon),c(4,5,6,7,8,9)],
tax_table$guild)
#report and return output.
cat(sum(!is.na(tax_table$guild))/(nrow(tax_table))*100,'% of fungal taxa assigned a functional guild.', sep = '')
return(assignments)
assign("assigned_tax_table", tax_table, envir = .GlobalEnv)
}
#Test the function.
test <- fg_assign(tax_table)
a <- c("a","b","c")
#function to assign species based on funguild
#takes a taxonomy table with kingdom/phylum/class/order/family/genus/species as separate columns with those names in lower case.
#returns a vector of FunGuild fucntional assignments.
#depends on R packages rvest, jsonlite.
##Testing the function - generate some artifical data to assign guild to.
#tax_table <- structure(list(taxonomy = "k__Fungi; p__Ascomycota; c__Pezizomycetes; o__Pezizales; f__Tuberaceae; g__Tuber; s__Tuber melosporum",
#kingdom = "Fungi", phylum = "Ascomycota", class = "Pezizomycetes",
#order = "Pezizales", family = "Tuberaceae", genus = "Tuber",
#species = "Tuber melosporum"), .Names = c("taxonomy", "kingdom",
#                                          "phylum", "class", "order", "family", "genus", "species"), row.names = 4L, class = "data.frame")
##Test the function.
#test <- fg_assign(tax_table)
tax_table <- structure(list(taxonomy = "k__Fungi; p__Ascomycota; c__Pezizomycetes; o__Pezizales; f__Tuberaceae; g__Tuber; s__Tuber melosporum",
kingdom = "Fungi", phylum = "Ascomycota", class = "Pezizomycetes",
order = "Pezizales", family = "Tuberaceae", genus = "Tuber",
species = "Tuber melosporum"), .Names = c("taxonomy", "kingdom",
"phylum", "class", "order", "family", "genus", "species"), row.names = 4L, class = "data.frame")
fg_assign <- function(tax_table){
#path to FUNGuild database
url <- "http://www.stbates.org/funguild_db.php"
#download database, convert it to something R interpretable.
fg <- url %>%
xml2::read_html() %>%
rvest::html_text()
fg <- jsonlite::fromJSON(gsub("funguild_db", "", fg))
#There are 9 unique levels of taxonomic resolution actually in FUNGuild (though 24 potential levels)
#0-keyword, 3-Phylum, 7-Order, 9-Family, 13-genus, 20species, 21-subspecies, 24-Form
#I only have data on k/c/p/o/f/g/s, so only going to deal with levels 3,7,9,13,20
#What follows is a series of if statements to assign function
#start with highest level of taxonomy and go down.
#there is almost certainly a better and faster way to do this. But this works and is fast enough.
assignments <- c()
#phylum level match.
assignments <- ifelse(tax_table$phylum %in% fg$taxon,
fg[match(tax_table$phylum, fg$taxon),c(4,5,6,7,8,9)],
tax_table$guild)
#class level match.
assignments <- ifelse(tax_table$class %in% fg$taxon,
fg[match(tax_table$class, fg$taxon),c(4,5,6,7,8,9)],
tax_table$guild)
#order level match.
assignments <- ifelse(tax_table$order %in% fg$taxon,
fg[match(tax_table$order, fg$taxon),c(4,5,6,7,8,9)],
tax_table$guild)
#family level match.
assignments <- ifelse(tax_table$family %in% fg$taxon,
fg[match(tax_table$family, fg$taxon),c(4,5,6,7,8,9)],
tax_table$guild)
#genus level match.
assignments <- ifelse(tax_table$genus %in% fg$taxon,
fg[match(tax_table$genus, fg$taxon),c(5,4,6,7,8,9)],
tax_table$guild)
#species level match.
assignments <- ifelse(tax_table$species %in% fg$taxon,
fg[match(tax_table$species, fg$taxon),c(4,5,6,7,8,9)],
tax_table$guild)
#report and return output.
cat(sum(!is.na(tax_table$guild))/(nrow(tax_table))*100,'% of fungal taxa assigned a functional guild.', sep = '')
return(assignments)
assign("assigned_tax_table", tax_table, envir = .GlobalEnv)
}
#Test the function.
test <- fg_assign(tax_table)
#function to assign species based on funguild
#takes a taxonomy table with kingdom/phylum/class/order/family/genus/species as separate columns with those names in lower case.
#returns a vector of FunGuild fucntional assignments.
#depends on R packages rvest, jsonlite.
##Testing the function - generate some artifical data to assign guild to.
#tax_table <- structure(list(taxonomy = "k__Fungi; p__Ascomycota; c__Pezizomycetes; o__Pezizales; f__Tuberaceae; g__Tuber; s__Tuber melosporum",
#kingdom = "Fungi", phylum = "Ascomycota", class = "Pezizomycetes",
#order = "Pezizales", family = "Tuberaceae", genus = "Tuber",
#species = "Tuber melosporum"), .Names = c("taxonomy", "kingdom",
#                                          "phylum", "class", "order", "family", "genus", "species"), row.names = 4L, class = "data.frame")
##Test the function.
#test <- fg_assign(tax_table)
tax_table <- structure(list(taxonomy = "k__Fungi; p__Ascomycota; c__Pezizomycetes; o__Pezizales; f__Tuberaceae; g__Tuber; s__Tuber melosporum",
kingdom = "Fungi", phylum = "Ascomycota", class = "Pezizomycetes",
order = "Pezizales", family = "Tuberaceae", genus = "Tuber",
species = "Tuber melosporum"), .Names = c("taxonomy", "kingdom",
"phylum", "class", "order", "family", "genus", "species"), row.names = 4L, class = "data.frame")
fg_assign <- function(tax_table){
#path to FUNGuild database
url <- "http://www.stbates.org/funguild_db.php"
#download database, convert it to something R interpretable.
fg <- url %>%
xml2::read_html() %>%
rvest::html_text()
fg <- jsonlite::fromJSON(gsub("funguild_db", "", fg))
#There are 9 unique levels of taxonomic resolution actually in FUNGuild (though 24 potential levels)
#0-keyword, 3-Phylum, 7-Order, 9-Family, 13-genus, 20species, 21-subspecies, 24-Form
#I only have data on k/c/p/o/f/g/s, so only going to deal with levels 3,7,9,13,20
#What follows is a series of if statements to assign function
#start with highest level of taxonomy and go down.
#there is almost certainly a better and faster way to do this. But this works and is fast enough.
tax_table$guild <- NA
#phylum level match.
tax_table$guild <- ifelse(tax_table$phylum %in% fg$taxon,
fg[match(tax_table$phylum, fg$taxon),5],
tax_table$guild)
#class level match.
tax_table$guild <- ifelse(tax_table$class %in% fg$taxon,
fg[match(tax_table$class, fg$taxon),5],
tax_table$guild)
#order level match.
tax_table$guild <- ifelse(tax_table$order %in% fg$taxon,
fg[match(tax_table$order, fg$taxon),5],
tax_table$guild)
#family level match.
tax_table$guild <- ifelse(tax_table$family %in% fg$taxon,
fg[match(tax_table$family, fg$taxon),5],
tax_table$guild)
#genus level match.
tax_table$guild <- ifelse(tax_table$genus %in% fg$taxon,
fg[match(tax_table$genus, fg$taxon),5],
tax_table$guild)
#species level match.
tax_table$guild <- ifelse(tax_table$species %in% fg$taxon,
fg[match(tax_table$species, fg$taxon),5],
tax_table$guild)
#report and return output.
cat(sum(!is.na(tax_table$guild))/(nrow(tax_table))*100,'% of fungal taxa assigned a functional guild.', sep = '')
return(tax_table$guild)
}
#Test the function.
test <- fg_assign(tax_table)
View(fg)
View(tax_table)
tax_table$guild <- fg[match(tax_table$genus, fg$taxon),c(4,5,6,7,8,9)]
tax_table$guild
d = read.csv("~/Desktop/Postdoc/Mesophotic_Macroalgae/Algal_Positive_OTU_IDs.csv", stringsAsFactors = FALSE)
e = c(rep(d$x,100))
f = c(1:150000)
setwd("~/Desktop/GIT_REPOSITORIES/Data_Course/data/data-shell/many_files/")
list.files()
paths = file.path(getwd(),"/",list.files(),"/data/",list.files(),".txt", fsep = "")
t=1; r=300
for(i in paths){
cat(writeLines(as.character(f[t:r])), file)
t=t+1
r=r+1
}
d = read.csv("~/Desktop/Postdoc/Mesophotic_Macroalgae/Algal_Positive_OTU_IDs.csv", stringsAsFactors = FALSE)
e = c(rep(d$x,100))
f = c(1:150000)
setwd("~/Desktop/GIT_REPOSITORIES/Data_Course/data/data-shell/many_files/")
list.files()
paths = file.path(getwd(),"/",list.files(),"/data/",list.files(),".txt", fsep = "")
t=1; r=300
for(i in paths){
cat(paste(as.character(f[t:r])), sep = "\n", file = i)
t=t+1
r=r+1
}
